{
	"Create XML serializable with root element": {
		"scope": "dart",
		"prefix": [
			"xml-root",
			"xml-serializable-root"
		],
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"import 'package:xml/xml.dart';",
			"import 'package:xml_annotation/xml_annotation.dart' as xml;",
			"",
			"import 'package:aha_client/src/api/util/xml_serializable.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"part '$TM_FILENAME_BASE.g.dart';",
			"",
			"@Freezed(makeCollectionsUnmodifiable: false)",
			"@xml.XmlSerializable()",
			"abstract class ${1/(.)(.*)/${1:/upcase}$2/} with _$${1/(.)(.*)/${1:/upcase}$2/} implements IXmlConvertible {",
			"  static const elementName = '${1/(.)(.*)/${1:/upcase}$2/}';",
			"",
			"  static const invalid = ${1/(.)(.*)/${1:/upcase}$2/}();",
			"",
			"  @xml.XmlSerializable(createMixin: true)",
			"  @xml.XmlRootElement(name: ${1/(.)(.*)/${1:/upcase}$2/}.elementName)",
			"  @With.fromString(r'_$$_$$_${1/(.)(.*)/${1:/upcase}$2/}XmlSerializableMixin')",
			"  const factory ${1/(.)(.*)/${1:/upcase}$2/}({",
			"    $0",
			"  }) = _${1/(.)(.*)/${1:/upcase}$2/};",
			"",
			"  factory ${1/(.)(.*)/${1:/upcase}$2/}.fromXmlElement(XmlElement element) =>",
			"      _$$_$$_${1/(.)(.*)/${1:/upcase}$2/}FromXmlElement(element);",
			"}"
		],
		"description": "Creates a XML serializable and convertible class",
	},
	"Create XML serializable": {
		"scope": "dart",
		"prefix": [
			"xml",
			"xml-serializable"
		],
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"import 'package:xml/xml.dart';",
			"import 'package:xml_annotation/xml_annotation.dart' as xml;",
			"",
			"import 'package:aha_client/src/api/util/xml_serializable.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"part '$TM_FILENAME_BASE.g.dart';",
			"",
			"@Freezed(makeCollectionsUnmodifiable: false)",
			"@xml.XmlSerializable()",
			"abstract class ${1/(.)(.*)/${1:/upcase}$2/} with _$${1/(.)(.*)/${1:/upcase}$2/} implements IXmlSerializable {",
			"  static const invalid = ${1/(.)(.*)/${1:/upcase}$2/}();",
			"",
			"  @xml.XmlSerializable(createMixin: true)",
			"  @With.fromString(r'_$$_$$_${1/(.)(.*)/${1:/upcase}$2/}XmlSerializableMixin')",
			"  const factory ${1/(.)(.*)/${1:/upcase}$2/}({",
			"    $0",
			"  }) = _${1/(.)(.*)/${1:/upcase}$2/};",
			"",
			"  factory ${1/(.)(.*)/${1:/upcase}$2/}.fromXmlElement(XmlElement element) =>",
			"      _$$_$$_${1/(.)(.*)/${1:/upcase}$2/}FromXmlElement(element);",
			"}"
		],
		"description": "Creates a XML serializable and equatable class",
	}
}
